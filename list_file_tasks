#!/usr/bin/env python
"""
Writes a list of the tasks to execute on each subject file in the
current directory given a supplied template file.

In the template file, the name of the file is denoted by:
"{file}" (excluding quotes).

If there exists a file with the same name as the subject file with the
extension ".skip" then skip it.

Written for Python 3.

Donald E. Willcox
"""

import argparse
import itertools
import re
import os

def get_matching_files(regexp_string):
    # Compile the re first
    regexp = re.compile(regexp_string)

    # Get the list of subject files in the current directory
    cwd_files = os.listdir()

    subject_files = []
    for f in cwd_files:
        if regexp.match(f):
            if not f"{f}.skip" in cwd_files:
                subject_files.append(f)
    return subject_files

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('template', type=str,
                        help=('Template file containing command-line tasks to execute, ' +
                              'one per line. \n' +
                              'The name of the subject file should be denoted by the string ' +
                              '"{file}" (excluding quotes).'))
    parser.add_argument('-re', '--regexp_file_names', type=str,
                        help='Python regular expression which files must match.')
    parser.add_argument('-ifile', '--input_file_names', type=str,
                        help=('Name of file containing file names, one on each line, ' +
                              'to use as {file} entries in the template.'))
    parser.add_argument('-o', '--out_task_file', type=str, default='tasks.todo',
                        help='Name of the output file listing the desired tasks. (Default tasks.todo).')
    args = parser.parse_args()

    if not (args.regexp_file_names or args.input_file_names):
        print('ERROR: either -re or -ifile options must be supplied.')
        
    if args.regexp_file_names:
        # Sanity Check: compile the regular expression

    # Get the tasks to perform on each file
    tasks = []
    tfile = open(args.template, 'r')
    for l in tfile.readlines():
        ls = l.strip()
        if ls:
            tasks.append(ls)
    tfile.close()
        
    subject_files = []

    # Get input file names if supplied from a file
    if args.input_file_names:
        fif = open(args.input_file_names, 'r')
        for l in fif:
            subject_files.append(l.strip())
        fif.close()

    # Get input file names if targeted by regular expression
    if args.regexp_file_names:
        subject_files += get_matching_files(args.regexp_file_names)

    # Form commands and write the output file
    fo = open(args.out_task_file, 'w')
    for sf in subject_files:
        cmd_line = " &&& ".join(task.replace("{file}", sf) for task in tasks)
        fo.write(cmd_line + '\n')
    fo.close()
